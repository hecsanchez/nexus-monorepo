
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.8.2
 * Query Engine version: 2060c79ba17c6bb9f5823312b6f6b7f4a845738e
 */
Prisma.prismaVersion = {
  client: "6.8.2",
  engine: "2060c79ba17c6bb9f5823312b6f6b7f4a845738e"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  phone: 'phone',
  role: 'role',
  password: 'password',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  clientId: 'clientId'
};

exports.Prisma.ClientScalarFieldEnum = {
  id: 'id',
  url: 'url',
  contractStart: 'contractStart',
  contractEnd: 'contractEnd',
  active: 'active',
  createdAt: 'createdAt'
};

exports.Prisma.ClientsOnSEsScalarFieldEnum = {
  clientId: 'clientId',
  seId: 'seId',
  assignedAt: 'assignedAt'
};

exports.Prisma.DepartmentScalarFieldEnum = {
  id: 'id',
  name: 'name',
  clientId: 'clientId',
  createdAt: 'createdAt'
};

exports.Prisma.WorkflowScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  departmentId: 'departmentId',
  clientId: 'clientId',
  active: 'active',
  timeSavedPerExecution: 'timeSavedPerExecution',
  moneySavedPerExecution: 'moneySavedPerExecution',
  status: 'status',
  createdAt: 'createdAt'
};

exports.Prisma.NodeScalarFieldEnum = {
  id: 'id',
  name: 'name',
  type: 'type',
  config: 'config',
  workflowId: 'workflowId',
  createdAt: 'createdAt'
};

exports.Prisma.ExecutionLogScalarFieldEnum = {
  id: 'id',
  workflowId: 'workflowId',
  nodeId: 'nodeId',
  status: 'status',
  timestamp: 'timestamp',
  log: 'log',
  exceptionId: 'exceptionId'
};

exports.Prisma.ExceptionScalarFieldEnum = {
  id: 'id',
  workflowId: 'workflowId',
  type: 'type',
  severity: 'severity',
  remedy: 'remedy',
  status: 'status',
  timestamp: 'timestamp'
};

exports.Prisma.CredentialScalarFieldEnum = {
  id: 'id',
  clientId: 'clientId',
  service: 'service',
  status: 'status',
  config: 'config',
  createdAt: 'createdAt'
};

exports.Prisma.PlanScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  pricePerCredit: 'pricePerCredit',
  contractLength: 'contractLength',
  cadence: 'cadence',
  setupFee: 'setupFee',
  cap: 'cap',
  overageCost: 'overageCost',
  usageApi: 'usageApi',
  creditsPerPeriod: 'creditsPerPeriod',
  prepaymentPercentage: 'prepaymentPercentage'
};

exports.Prisma.SubscriptionScalarFieldEnum = {
  id: 'id',
  clientId: 'clientId',
  planId: 'planId',
  status: 'status',
  createdAt: 'createdAt',
  billedToDate: 'billedToDate'
};

exports.Prisma.InvoiceScalarFieldEnum = {
  id: 'id',
  subscriptionId: 'subscriptionId',
  issueDate: 'issueDate',
  dueDate: 'dueDate',
  amount: 'amount',
  status: 'status',
  paymentMethod: 'paymentMethod',
  description: 'description'
};

exports.Prisma.UsageLogScalarFieldEnum = {
  id: 'id',
  subscriptionId: 'subscriptionId',
  credits: 'credits',
  description: 'description',
  timestamp: 'timestamp'
};

exports.Prisma.DocumentLinkScalarFieldEnum = {
  id: 'id',
  clientId: 'clientId',
  type: 'type',
  url: 'url',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.UserRole = exports.$Enums.UserRole = {
  ADMIN: 'ADMIN',
  SE: 'SE',
  CLIENT: 'CLIENT'
};

exports.WorkflowStatus = exports.$Enums.WorkflowStatus = {
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE',
  DRAFT: 'DRAFT'
};

exports.ExceptionSeverity = exports.$Enums.ExceptionSeverity = {
  LOW: 'LOW',
  MEDIUM: 'MEDIUM',
  HIGH: 'HIGH',
  CRITICAL: 'CRITICAL'
};

exports.ExceptionStatus = exports.$Enums.ExceptionStatus = {
  OPEN: 'OPEN',
  IN_PROGRESS: 'IN_PROGRESS',
  RESOLVED: 'RESOLVED',
  CLOSED: 'CLOSED'
};

exports.CredentialService = exports.$Enums.CredentialService = {
  SLACK: 'SLACK',
  GITHUB: 'GITHUB',
  SALESFORCE: 'SALESFORCE',
  JIRA: 'JIRA',
  AWS: 'AWS'
};

exports.CredentialStatus = exports.$Enums.CredentialStatus = {
  CONNECTED: 'CONNECTED',
  DISCONNECTED: 'DISCONNECTED',
  EXPIRED: 'EXPIRED',
  INVALID: 'INVALID'
};

exports.PlanCadence = exports.$Enums.PlanCadence = {
  MONTHLY: 'MONTHLY',
  QUARTERLY: 'QUARTERLY',
  ANNUALLY: 'ANNUALLY'
};

exports.InvoiceStatus = exports.$Enums.InvoiceStatus = {
  DRAFT: 'DRAFT',
  ISSUED: 'ISSUED',
  PAID: 'PAID',
  OVERDUE: 'OVERDUE',
  CANCELLED: 'CANCELLED'
};

exports.DocumentType = exports.$Enums.DocumentType = {
  SURVEY: 'SURVEY',
  ADA_PROPOSAL: 'ADA_PROPOSAL',
  CONTRACT: 'CONTRACT',
  OTHER: 'OTHER'
};

exports.Prisma.ModelName = {
  User: 'User',
  Client: 'Client',
  ClientsOnSEs: 'ClientsOnSEs',
  Department: 'Department',
  Workflow: 'Workflow',
  Node: 'Node',
  ExecutionLog: 'ExecutionLog',
  Exception: 'Exception',
  Credential: 'Credential',
  Plan: 'Plan',
  Subscription: 'Subscription',
  Invoice: 'Invoice',
  UsageLog: 'UsageLog',
  DocumentLink: 'DocumentLink'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
